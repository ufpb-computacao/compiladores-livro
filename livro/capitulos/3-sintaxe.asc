== Análise Sintática

.Objetivos do capítulo
____________________
Ao final deste capítulo você deverá ser capaz de:

* Entender a função do analisador sintático e como ele se integra ao resto do compilador
* Compreender o conceito de estrutura sintática
* Criar Gramáticas Livres de Contexto que capturam a estrutura sintática de linguagens
* Criar o analisador sintático para uma linguagem usando uma ferramenta geradora
____________________

A *((análise sintática))* é a etapa do compilador que ocorre após a análise léxica. 
O objetivo da análise sintática é determinar a estrutura sintática do 
código-fonte que está sendo compilado. Para isso, a análise sintática 
utiliza o fluxo de _tokens_ produzido pela análise léxica. 

No capítulo anterior, mencionamos uma analogia entre compilação de um programa 
e leitura de um texto. Vimos que a análise léxica pode ser entendida como o 
agrupamento de letras individuais em palavras. Já a análise sintática é 
similar ao agrupamento de palavras para formar frases. Quando lemos, nosso 
cérebro determina automaticamente a estrutura sintática das frases, pois 
entender essa estrutura (mesmo que apenas intuitivamente) é necessário para 
compreender o significado da frase: quem é o sujeito (quem realiza a ação), 
quem é o objeto (quem sofre a ação), etc. A análise sintática em um compilador 
faz o mesmo tipo de tarefa, mas determinando a estrutura do código-fonte 
que está sendo compilado. 

Neste capítulo, vamos entender em mais detalhes a função do analisador sintático 
e como ele funciona. Assim como usamos o formalismo das expressões regulares 
para guiar a criação do analisador léxico, veremos o uso das _Gramáticas Livres 
de Contexto_ para guiar a criação de analisadores sintáticos. Também veremos 
como usar o gerador bison como uma ferramenta para ajudar na criação do 
analisador sintático (assim como usamos o flex para a análise léxica).

=== Estrutura Sintática

A estrutura sintática de um programa relaciona cada parte do programa com suas 
sub-partes componentes. Por exemplo, um comando +if+ completo tem três partes 
que o compõem: uma condição de teste, um comando para executar caso a condição 
seja verdadeira, e um comando para executar caso a condição seja falsa. Quando 
o compilador identifica um +if+ em um programa, é importante que ele possa 
acessar esses componentes para poder gerar código executável para o +if+. Por 
isso, não basta apenas agrupar os caracteres em __tokens__, é preciso também 
agrupar os __tokens__ em estruturas sintáticas. 

Uma forma comum de representar a estrutura sintática é usando árvores. As 
árvores na ciência da computação são normalmente desenhadas de cabeça para 
baixo, com a raiz no topo (ver <<fig_arvore>>). A raiz é um nó da árvore da qual todo o resto 
se origina. Cada nó pode ter nós filhos que aparecem abaixo dele, ligados 
por um __arco__ ou __aresta__. As __folhas__ são os nós que não possuem filhos 
e portanto aparecem ``nas pontas'' da árvore. 

[[fig_arvore]]
.Representação usual de uma árvore na computação: com a raiz no topo e folhas em baixo.
image::images/sintaxe/arvore.eps[]

Uma árvore que representa a estrutura 
sintática de um programa é normalmente chamada de __((árvore sintática))__. 
Para o exemplo do comando condicional 
mencionado antes, a árvore sintática seria similar à mostrada na 
<<arvif1>>. Como filhos do nó +if+ (a raiz) existem três 
nós, o primeiro representando a condição, o segundo o comando para 
o caso da condição ser verdadeira (C1) e o terceiro representando 
o comando para o caso da condição ser falsa (C2). 

[[arvif1]]
.Árvore sintática para o comando condicional completo.
image::images/sintaxe/arvif1.eps[scaledwidth="45%"]

O papel da análise sintática é construir uma árvore, como a da <<arvif1>>, 
para todas as partes de um programa. Essa árvore é incompleta pois a condição 
e os comandos C1 e C2 possuem estrutura também, e essa estrutura precisa estar 
representada na árvore completa. Para discutir a estrutura dessas partes, vamos 
ver um pouco mais sobre árvores sintáticas, especificamente sobre árvores de 
expressão. 

==== Árvores de expressão

((Árvores de expressão)) são árvores sintáticas construídas para expressões 
aritméticas, relacionais ou lógicas. Uma ((expressão)) é formada por __operadores__, 
que designam as operações que fazem parte da expressão, e __operandos__, que 
designam os valores ou sub-expressões sobre os quais os operadores agem. 
Em uma árvore de expressão, os operadores são nós internos (nós que possuem 
filhos) e os valores básicos são folhas da árvore.

Um exemplo é a expressão `2 + 3`, cuja árvore sintática é mostrada na 
<<exparv1>>a. O operador é `+` e os operandos são `2` e `3`. 
Uma expressão mais complexa é `(2 + 3) * 7`, cuja árvore é mostrada 
na <<exparv1>>b. O operando direito da multiplicação é o 
número `7`, mas o operando esquerdo é a sub-expressão `2 + 3`. Note 
que como a estrutura da expressão fica evidenciada pela estrutura 
da árvore, não é necessário usar parênteses na árvore para 
`(2 + 3) * 7`, apesar dessa expressão precisar de parênteses. 
Os parênteses são necessários para representar a estrutura da 
expressão como uma __string__, uma sequência linear de caracteres, 
mas não na representação em árvore. 

[[exparv1]]
.Árvore sintática para duas expressões, (a) `2 + 3` (b) `(2 + 3) * 7`.
image::images/sintaxe/exparv1.eps[scaledwidth="45%"]

As operações em expressões são geralmente binárias, porque precisam de 
dois operandos. Algumas operações são unárias, como a negação de um número 
ou o NÃO lógico. Por isso, as árvores de expressão são compostas por nós que 
podem ter 0, 1 ou 2 filhos. Esse tipo de árvore é normalmente chamado de 
__árvore binária__. 

Em um comando como o condicional `if`, podemos pensar que o `if` é um 
operador com três operandos: condição, comando 1 e comando 2. Voltando 
à árvore para um comando condicional, digamos que um trecho do código 
do programa que está sendo processado pelo compilador é o seguinte: 

[source, c]
.Exemplo de comando condicional
----
  if (x > 2) 
    y = (x - 2) * 7;
  else
    y = x + 2 * 5;
----

Nesse comando, a condição é uma expressão relacional (de comparação), 
`x > 2`, o comando 1 é a atribuição do valor da expressão `(x - 2) * 7` 
à variável `y`, e o comando 2 é a atribuição do valor da expressão 
`x + 2 * 5` à variável `y`. A árvore para esse comando começa da forma 
que já vimos, mas inclui a estrutura das partes do comando. Essa árvore 
pode ser vista na <<arvif2>>.

[[arvif2]]
.Árvore sintática completa para um comando condicional.
image::images/sintaxe/arvif2.eps[scaledwidth="55%"]

O analisador sintático de um compilador vai gerar, para o código mostrado 
antes, a árvore na <<arvif2>>. As técnicas para fazer isso serão estudadas 
no resto do capítulo. 

=== Relação com o Analisador Léxico

O analisador sintático é a etapa que vem logo após o analisador léxico no 
compilador, e isso acontece porque as etapas estão fortemente relacionadas. 
A tarefa do analisador sintático é muito mais simples de realizar partindo 
dos __tokens__ da entrada, ao invés dos caracteres isolados. 

Em teoria, como vimos no Capítulo 1, a comunicação entre o analisador léxico 
e o analisador sintático é sequencial: o analisador léxico produz toda a 
sequência de __tokens__ (criada a partir do arquivo de entrada) e passa 
essa sequência inteira para o analisador sintático. Essa ideia é mostrada 
na <<lexsin1>>. 

[[lexsin1]]
.Relação simplificada entre analisadores léxico e sintático.
image::images/sintaxe/lexsin1.eps[scaledwidth="80%"]

Na prática, as duas etapas são organizadas de forma diferente nos compiladores 
reais. Não é necessário, para o analisador sintático, ter acesso a toda a 
sequência de __tokens__ para fazer a análise sintática. Na maioria dos casos, 
é possível construir a árvore sintática examinando apenas um, ou um número 
pequeno de __tokens__ de cada vez. Por isso, o mais comum é fazer com que o 
analisador sintático e o analisador léxico funcionem em conjunto, ao invés 
do léxico terminar todo seu processamento e passar o resultado para o 
sintático. Nesse arranjo, o analisador sintático está no comando, por assim 
dizer: é o analisador sintático que aciona o analisador léxico, quando 
necessário para obter o próximo __token__ da entrada. O analisador léxico 
deve manter controle sobre que partes da entrada já foram lidas e a partir 
de onde começa o próximo __token__. Essa relação é ilustrada na <<lexsin2>>, 
onde +proxtoken()+ é a função do analisador léxico que deve ser chamada para 
obter o próximo __token__; o analisador sintático chama essa função sempre 
que necessário, obtém o próximo __token__, e continua com a análise. 

[[lexsin2]]
.Relação entre analisadores léxico e sintático, na prática.
image::images/sintaxe/lexsin2.eps[scaledwidth="80%"]

Um dos motivos que levaram a essa organização das duas primeiras etapas de 
análise foi que em computadores antigos era pouco provável ter memória 
suficiente para armazenar toda a sequência de __tokens__ da entrada (a não 
ser que o programa de entrada fosse pequeno), então fazia mais sentido 
processar um __token__ de cada vez. Da mesma forma, não havia memória 
suficiente para guardar toda a árvore sintática do programa. Por isso, 
os compiladores eram organizados de maneira que o analisador sintático 
comandava todo o processo de tradução: obtia o próximo __token__ do 
analisador léxico e, se fosse possível, passava uma sub-estrutura 
completa do programa (uma sub-árvore) para ser processada pelas 
etapas seguintes, já gerando o código-destino para essa parte. Em 
seguida, essa parte da árvore era descartada e o analisador sintático 
passava para a próxima parte da árvore. 

Esse tipo de organização de um compilador era conhecida como __tradução 
dirigida pela sintaxe__. Hoje em dia, com os computadores tendo quantidades 
de memória disponível muito maiores, é menos comum ver compiladores 
reais seguindo esse esquema, e muitos constroem a árvore sintática inteira 
do programa, que é passada para as etapas seguintes. Isso porque vários 
processos das etapas seguintes podem funcionar melhor se puderem ter 
acesso à árvore sintática inteira, ao invés de apenas um pedaço de cada vez.

Mas a relação entre o analisador léxico e o analisador sintático continua 
a mesma mostrada na <<lexsin2>> até hoje, mesmo tendo mais memória, pois 
para a maioria das linguagens de programação não é mesmo necessário 
acessar toda a sequência de __tokens__ da entrada. Alguns tipos de analisador 
sintático armazenam e analisam os últimos latexmath:[$n$] __tokens__, para 
latexmath:[$n$] pequeno (ao invés de analisar apenas um __token__ por vez). 
Mesmo assim, isso não muda a relação entre os analisadores léxico e sintático, 
o analisador sintático apenas chama a função de obter o próximo __token__ 
quantas vezes precisar. 

=== Gramáticas Livres de Contexto

As gramáticas formais são ferramentas para descrição de linguagens. Usamos 
aqui o adjetivo gramáticas __formais__ para distinguir de outros sentidos 
da palavra ``gramática'', por exemplo na frase 
``a gramática da língua portuguesa'', mas daqui para frente, sempre que 
usarmos a palavra ``gramática'', estaremos nos referindo às gramáticas 
formais, a não ser que haja indicação do contrário. 

As gramáticas livres de contexto estão associadas às __linguagens livres 
de contexto__. Assim como a classe das linguagens regulares é usada na 
análise léxica, a classe das linguagens livres de contexto é essencial 
para a análise sintática. Aqui não vamos nos preocupar com linguagens 
livres do contexto em geral, apenas usando as gramáticas como ferramentas 
para fazer a análise sintática. 

Uma gramática livre do contexto latexmath:[$G$] é especificada por quatro 
componentes: o conjunto de símbolos terminais latexmath:[$T$], o conjunto 
de símbolos variáveis (ou não-terminais) latexmath:[$V$], o conjunto de 
produções latexmath:[$P$] e o símbolo inicial latexmath:[$S$], sendo que 
o símbolo inicial deve ser um dos símbolos variáveis (latexmath:[$S \in V$]). 

As gramáticas funcionam como um formalismo gerador, similar às expressões 
regulares: começando pelo símbolo inicial, é possível usar as produções 
para gerar cadeias ou sentenças da linguagem que desejamos. Os símbolos 
terminais representam símbolos que aparecem na linguagem, enquanto que 
os símbolos variáveis são usados como símbolos auxiliares durante 
as substituições. Veremos alguns exemplos para tornar essas ideias 
mais claras. 

==== Exemplo: Palíndromos

O primeiro exemplo é uma linguagem bastante simples que gera cadeias 
que são palíndromos. Um __palíndromo__ é uma palavra ou frase que 
é lida da mesma forma de frente para trás e de trás para frente, como 
``roma e amor'' ou 
``socorram-me, subi no ônibus em marrocos''. Vamos trabalhar com 
palíndromos construídos com um alfabeto bastante limitado, de apenas 
dois símbolos: +a+ e +b+. Alguns palíndromos nesse alfabeto são 
+abba+, +aaa+ e +ababa+. 

Existem dois tipos de palíndromos, que podemos chamar de __palíndromos 
pares__ e __palíndromos ímpares__. Os palíndromos pares, como +abba+, 
contêm um número par de símbolos, com a segunda metade igual ao 
reverso da primeira metade. No caso de +abba+, as metades são +ab+ 
e +ba+, sendo que a segunda metade, +ba+, é o reverso da primeira, 
+ab+. Cada símbolo em uma metade deve ocorrer na outra também. 

Os palíndromos ímpares, como +ababa+, possuem um número ímpar de 
símbolos, com uma primeira parte, um símbolo do meio, e uma 
última parte; a última parte é o reverso da primeira, mas o símbolo 
do meio pode ser qualquer um. No caso do alfabeto com símbolos +a+ e
+b+, tanto +ababa+ quanto +abbba+ são palíndromos ímpares com 
primeira e última partes idênticas, mas símbolos do meio diferentes. 

A gramática para essa linguagem de palíndromos tem dois símbolos 
terminais (+a+ e +b+), um símbolo variável (latexmath:[$S$]) que 
também é o símbolo inicial, e quatro produções: 

[latexmath]
++++++ 
\[ \begin{aligned} 
  S & \rightarrow & aSa \\
  S & \rightarrow & bSb \\
  S & \rightarrow & a \\
  S & \rightarrow & b \\
  S & \rightarrow & \varepsilon
\end{aligned} \]
++++++

Cada uma dessas produções representam uma forma em que o símbolo latexmath:[$S$]
pode ser transformado para gerar cadeias da linguagem. O símbolo 
latexmath:[$\varepsilon$] representa uma cadeia vazia, ou seja, uma cadeia sem 
nenhum símbolo. Quando temos várias 
produções para o mesmo símbolo variável, como no caso da gramática para 
palíndromos, podemos economizar espaço usando a seguinte notação:

[latexmath]
++++++ 
\[ S \rightarrow aSa\ \vert\ bSb\ \vert\ a \ \vert\ b\ \vert\ \varepsilon \]
++++++

Todas as produções para o símbolo latexmath:[$S$] aparecem na mesma linha, 
separadas por barras. Podemos ler essa gramática como ``latexmath:[$S$] pode 
produzir latexmath:[$aSa$] ou latexmath:[$bSb$] ou ...''. 

O processo de geração de uma cadeia seguindo as regras de produção de uma 
gramática é chamado de __derivação__, e será explicado a seguir. 

==== Derivação 

Vamos começar estabelecendo algumas definições necessárias: 

Uma __sentença__ em uma gramática é uma sequência de símbolos 
terminais. Para a gramática de palíndromos com a e b, +abba+ é uma 
sentença. 

Uma __forma sentencial__ de uma gramática é uma sequência de símbolos 
terminais e variáveis. Uma forma sentencial pode ser formada apenas 
por símbolos variáveis, apenas por símbolos terminais, ou uma mistura 
dos dois tipos. Dessa forma, toda sentença é uma forma sentencial, 
mas uma forma sentencial que inclua algum símbolo variável não é 
uma sentença. Para a gramática de palíndromos em a e b, +aSa+ é uma 
forma sentencial (mas não é sentença), enquanto +aaa+ é uma forma 
sentencial que também é uma sentença. 

Uma __derivação__ na gramática latexmath:[$G$] é uma sequência de 
formas sentenciais tal que:

. A primeira forma sentencial da sequência é apenas o símbolo inicial 
da gramática latexmath:[$G$]
. A última forma sentencial é uma sentença (ou seja, só tem símbolos 
terminais)
. Cada forma sentencial na sequência (exceto a primeira) pode ser 
obtida da forma sentencial anterior pela substituição de um símbolo 
variável pelo lado direito de uma de suas produções

Um exemplo simples de derivação na gramática de palíndromos é:

[latexmath]
++++++
\[ S \Rightarrow a \]
++++++

Essa derivação tem apenas duas formas sentenciais: latexmath:[$S$], que é 
o símbolo inicial, e latexmath:[$a$], que é uma sentença. Para separar as 
formas sentenciais em uma derivação usamos o símbolo latexmath:[$\Rightarrow$].
A derivação demonstra que a cadeia latexmath:[$a$] é uma sentença da linguagem 
gerada pela gramática, e ela é obtida a partir do símbolo latexmath:[$S$] pelo 
uso da terceira produção da gramática, latexmath:[$S \rightarrow a$]. Como 
especificado pela produção, substituímos o símbolo latexmath:[$S$] pelo 
símbolo latexmath:[$a$], gerando assim a segunda forma sentencial; nesse caso, 
a segunda forma sentencial já é uma sentença, e a derivação termina por aí 
(até porque não existem mais símbolos variáveis na forma sentencial).

Uma derivação com um passo a mais seria:

[latexmath]
++++++
\[ S \Rightarrow aSa \Rightarrow aa \]
++++++

A sentença gerada nessa derivação é latexmath:[$aa$]. No primeiro passo da 
derivação, substituímos o símbolo latexmath:[$S$] por latexmath:[$aSa$], 
usando a sua primeira produção. No segundo passo o símbolo latexmath:[$S$] 
entre os dois latexmath:[$a$] é substituído pela cadeia vazia (a última 
produção na gramática), desaparecendo e deixando apenas os dois a's. 

Agora vejamos a derivação para gerar a cadeia +abba+:

[latexmath]
++++++
\[ S \Rightarrow aSa \Rightarrow abSba \Rightarrow abba \]
++++++

Os dois primeiros passos mostram latexmath:[$S$] sendo substituído por 
latexmath:[$aSa$] e latexmath:[$bSb$], nesta ordem. O último passo mais uma 
vez substitui o latexmath:[$S$] pela cadeia vazia, fazendo com que ele 
desapareça da forma sentencial. 

Para gerar +ababa+ a derivação é similar, mudando apenas no último passo:

[latexmath]
++++++
\[ S \Rightarrow aSa \Rightarrow abSba \Rightarrow ababa \]
++++++

Desta vez, ao invés de substituir latexmath:[$S$] pela cadeia vazia no 
último passo, substituímos por latexmath:[$a$], obtendo o resultado 
esperado. Podemos ver que a derivação para um palíndromo par termina
com a substituição de latexmath:[$S$] pela cadeia vazia no último 
passo, enquanto que a derivação para um palíndromo ímpar termina com 
latexmath:[$S$] substituído por latexmath:[$a$] ou latexmath:[$b$]. 

Qualquer derivação usando a gramática para palíndromos vai gerar, ao 
final, uma sentença que é um palíndromo usando os dois símbolos +a+ e 
+b+. Não há como, seguindo as produções da gramática, gerar uma sentença 
que não é um palíndromo usando esses dois símbolos. O conjunto de 
todas as sentenças geradas por uma gramática livre de contexto é a 
__linguagem__ gerada pela gramática. 

A ideia é usar as gramáticas para descrever as estruturas sintáticas que 
podem ser formadas na linguagem que queremos analisar. Isso é parecido com 
o que vimos na análise léxica, de usar expressões regulares para descrever 
os padrões de __tokens__ que podem ser usados na linguagem.

Agora que já entendemos como especificar uma gramática livre de contexto e 
o processo de derivação a partir dela, vamos ver mais alguns exemplos de 
linguagens e suas estruturas sintáticas descritas por gramáticas. 

==== Exemplo: Expressões Aritméticas

Um exemplo mais similar às linguagens de programação é uma linguagem 
simples para expressões aritméticas, como vimos no Capítulo 2. Aqui 
veremos uma gramática para uma linguagem de expressões aritméticas 
formadas por números inteiros e as quatro operações básicas. 

Diferente do exemplo anterior dos palíndromos, para a linguagem de 
expressões não é interessante trabalhar com caracteres isolados. 
Afinal, vimos como criar um analisador léxico justamente para 
agrupar os caracteres em __tokens__, o que facilita muito a análise 
sintática. Por isso, nesse exemplo e em praticamente todos daqui 
para a frente, os símbolos terminais não serão caracteres, mas sim 
__tokens__. Alguns __tokens__ são formados por apenas um caractere, 
mas para a gramática não faz diferença; a análise sintática vai ser 
realizada com base nos __tokens__. 

Para a linguagem de expressões, temos __tokens__ de três tipos: números, 
operadores e pontuação. Os operadores são os símbolos para as quatro 
operações, e o tipo pontuação é para os parênteses. Lembrando do capítulo 
anterior, cada __token__ tem um tipo e um valor; um __token__ do tipo 
operador vai ter um valor associado que determina qual dos quatro 
operadores o __token__ representa. O mesmo acontece com o valor dos 
__tokens__ de tipo pontuação: o valor especifica se é um parêntese abrindo 
ou fechando. Para os __tokens__ de tipo número, o valor é o valor numérico 
do __token__. 

Uma gramática para a linguagem de expressões é a seguinte: 

[latexmath]
++++++
\[ E \rightarrow E + E \ \vert\ E * E\ \vert\ E - E \ \vert\ E / E \ \vert\ ( E ) \ \vert\ \mathbf{num} \]
++++++

Essas produções representam o fato que uma expressão pode ser: 

* Uma soma (ou multiplicação, subtração, divisão) de duas expressões
* Uma expressão entre parênteses
* Uma constante numérica (representada aqui por um token de tipo *num*)

Todos os símbolos nas produções dessa gramática são variáveis ou são _tokens_; 
para deixar a notação mais leve, usamos o caractere `+` para representar 
um _token_ de tipo operador e valor que representa um operador de soma. Isso 
não deve causar problema; deve-se apenas lembrar que todos os terminais são 
_tokens_. No caso do _token_ de tipo *num*, o valor dele não aparece na 
gramática porque não é relevante para a estrutura sintática da linguagem. 
Qualquer _token_ de tipo número, independente do valor, faz parte dessa 
mesma produção (diferente dos _tokens_ de operadores). 

Vejamos algumas derivações nessa gramática. Começando por uma expressão 
simples, `142 + 17`. A sequência de _tokens_ associada a essa expressão 
é `<num, 142> <op, SOMA> <num, 17>`. Na derivação a seguir vamos 
representar os tokens da mesma forma que na gramática (ou seja, 
`<op, SOMA>` vira apenas +, e qualquer _token_ de tipo número é 
representado apenas como *num*):

[latexmath]
++++++
\[ E \Rightarrow E + E \Rightarrow \mathbf{num} + E \Rightarrow \mathbf{num} + \mathbf{num} \]
++++++

Em cada passo de derivação substituímos um símbolo variável pelo lado direito 
de uma de suas produções. Na derivação anterior, quando chegamos na forma sentencial 
latexmath:[$E+E$], temos a opção de substituir o latexmath:[$E$] da esquerda ou o 
da direita; no caso, escolhemos o da esquerda. Mas o resultado seria o mesmo se 
tivéssemos começado pelo latexmath:[$E$] da direita. Apenas a sequência de passos 
da derivação apareceria em outra ordem, mas o resultado final seria o mesmo, e 
a estrutura sintática da expressão seria a mesma. 

Podemos estabelecer algumas ordens padronizadas, por exemplo em uma 
_derivação mais à esquerda_, quando há uma escolha de qual símbolo 
variável substituir, sempre escolhemos o símbolo mais à esquerda 
(como no exemplo anterior). Da mesma forma, podemos falar de uma 
_derivação mais à direita_. 

Mas existe uma forma melhor de visualizar uma derivação, uma forma 
que deixa mais clara a estrutura sintática de cada sentença derivada, 
e que não depende da ordem dos símbolos variáveis substituídos. Essa 
forma são as _árvores de derivação_. 

==== Árvores de Derivação

Uma alternativa para representar derivações em uma gramática é usar as 
_árvores de derivação_ ao invés de sequências lineares de formas 
sentenciais que vimos até agora. Uma árvore de derivação é semelhante 
às árvores sintáticas que vimos antes, mas incluem mais detalhes 
relacionados às produções da gramática utilizada. Uma árvore sintática 
não inclui nenhuma informação sobre símbolos variáveis da gramática, 
por exemplo. Mais à frente, um dos nossos objetivos será obter 
a árvore sintática de um programa, mas para fazer a análise sintática 
é importante entender as árvores de derivação. 

Em uma árvore de derivação, cada nó é um símbolo terminal ou variável. 
As folhas da árvore são símbolos terminais, e os nós internos são 
símbolos variáveis. Um símbolo variável V vai ter como filhos na 
árvore os símbolos para os quais V é substituído na derivação. 
Por exemplo, sejam as seguintes derivações na gramática de expressões: 

[latexmath]
++++++
\[ \begin{aligned} 
  E & \Rightarrow \mathbf{num} \\
  E & \Rightarrow E + E \Rightarrow \mathbf{num} + E \Rightarrow \mathbf{num} + \mathbf{num} \\
\end{aligned}
\]
++++++

As árvores de derivação correspondentes são: 

[[arvderiv1]]
.Árvores de derivação para duas expressões.
image::images/sintaxe/arvderiv1.eps[scaledwidth="45%"]

Vemos que quando o símbolo latexmath:[$E$] é substituído apenas por *num*, 
o nó correspondente na árvore só tem um filho (ver árvore esquerda na 
<<arvderiv1>>). Quando o símbolo latexmath:[$E$] é substituído por 
latexmath:[$E + E$], isso significa que o nó correspondente na árvore 
terá três filhos (ver árvore direita na <<arvderiv1>>).

Para uma árvore como a que está mostrada no lado direito da <<arvderiv1>>, 
não importa a ordem de substituição dos dois símbolos latexmath:[$E$] na 
forma sentencial latexmath:[$E+E$]; qualquer que seja a ordem, a árvore 
de derivação será a mesma. 

Entretanto, existem sentenças geradas por essa gramática de expressões 
para as quais nós podemos encontrar mais de uma árvore de derivação. 
Quando temos mais de uma árvore de derivação para uma mesma sentença, 
dizemos que a gramática é _ambígua_, e a ambiguidade de uma gramática 
é um problema, como veremos a seguir. 

==== Ambiguidade

O exemplo anterior demonstra um problema importante que pode ocorrer 
com gramáticas livres de contexto: ambiguidade. Uma gramática é 
_ambígua_ quando existe pelo menos uma sentença gerada pela gramática 
que pode ser gerada de duas ou mais formas diferentes; ou seja, essa 
sentença terá duas ou mais árvores de derivação diferentes. 

A ambiguidade é um problema pois significa que uma mesma sentença pode 
ter duas estruturas sintáticas diferentes, na mesma gramática. A estrutura 
sintática de uma sentença vai influenciar no seu significado e como ela 
é interpretada pelo compilador, por exemplo. Desta forma, uma gramática 
ambígua para uma linguagem de programação significa que certos programas 
poderiam funcionar de duas (ou mais) maneiras diferentes, dependendo de 
como o compilador interprete as partes ambígua. Obviamente é importante 
que uma linguagem tenha programas que funcionem sempre de uma mesma maneira, 
caso contrário o programador teria dificuldade para aprender como trabalhar 
com a linguagem. 

No exemplo da gramática de expressões, uma ambiguidade ocorre quando misturamos
operadores como soma e multiplicação. Na expressão `6 * 5 + 12`, deve ser 
efetuada primeiro a soma ou a multiplicação? Em termos de estrutura sintática, 
a pergunta é se a expressão é 

. uma soma, com operando esquerdo `6 * 5` e operando direito `12`
. ou uma multiplicação com operando esquerdo `6` e operando direito `5 + 12`

Nós somos acostumados com a convenção de sempre fazer multiplicações e divisões 
antes de somas e subtrações, então para nós o mais natural é seguir a primeira 
interpretação. Mas a gramática que vimos não estabelece nenhuma interpretação, 
possibilitando as duas. Para essa mesma sentença, nesta gramática, duas árvores 
de derivação podem ser construídas: 

[[ambig]]
.Duas árvores de derivação para a sentença 6 * 5 + 12
image::images/sintaxe/ambig.eps[scaledwidth="80%"]

Cada uma das árvores representa uma das duas interpretações para a expressão. 
A árvore da esquerda representa a primeira interpretação: para realizar a soma 
é necessário obter o valor dos seus dois operandos, sendo que o operando esquerdo 
da soma é a multiplicação `6 * 5`; portanto, a multiplicação seria realizada 
primeiro. A árvore direita da <<ambig>> representa a segunda interpretação, que 
seria calcular primeiro a soma `5 + 12` e depois multiplicar por 6. 

O que queremos é que a própria gramática evite a ambiguidade, determinando 
apenas uma das duas árvores de derivação para uma sentença como `6 * 5 + 12`, 
e que essa árvore corresponda à interpretação esperada: que a multiplicação 
deve ser efetuada antes da soma. Para isso precisamos construir uma nova 
gramática, que codifica nos símbolos variáveis os diferentes níveis de 
precedência dos operadores:

[latexmath]
++++++
\[ \begin{aligned}
  E & \rightarrow E + T \ \vert\ E - T \ \vert\ T \\
  T & \rightarrow T * F \ \vert\ T / F \ \vert\ F \\
  F & \rightarrow ( E ) \ \vert\ \mathbf{num}
  \end{aligned}
\]
++++++

Essa gramática tem três símbolos variáveis latexmath:[$E$], latexmath:[$T$] e 
latexmath:[$F$] (que podemos pensar como _expressão_, _termo_ e _fator_). Cada 
um representa um nível de precedência: 

* o símbolo latexmath:[$E$] representa a precedência mais baixa, onde estão 
os operadores de soma e subtração. 
* latexmath:[$T$] representa o próximo nível de precedência, com os operadores 
de multiplicação e divisão. 
* latexmath:[$F$] representa o nível mais alto de precedência, onde ficam os 
números isolados e as expressões entre parênteses; isso significa que o uso 
de parênteses se sobrepõe à precedência de qualquer operador, como esperado.

Esta gramática gera as mesmas sentenças que a primeira gramática de expressões 
que vimos, mas sem ambiguidade. Nesta gramática, existe apenas uma árvore de 
derivação para a sentença `6 * 5 + 12`, mostrada na <<e6x5p12>>. 

[[e6x5p12]]
.Árvore de derivação para a sentença 6 * 5 + 12 na nova gramática
image::images/sintaxe/e6x5p12.eps[scaledwidth="30%"]

A árvore mostrada na <<e6x5p12>> é mais complexa do que as árvores da <<ambig>>, 
mas essa complexidade adicional é necessária para evitar a ambiguidade. 

Toda linguagem de programação tem uma parte para expressões aritméticas, relacionais 
e lógicas. Isso significa que a gramática para uma linguagem de programação vai 
incluir uma parte para expressões. Essa parte da gramática de qualquer linguagem 
de programação segue a mesma ideia vista no último exemplo: é usado um símbolo 
variável para cada nível de precedência. Como as expressões em uma linguagem de 
programação completa pode ter vários níveis de precedência (bem mais do que três), 
essa acaba se tornando uma parte grande da gramática da linguagem. A seguir veremos 
um exemplo de gramática para uma linguagem de programação simples. 

==== Exemplo: Linguagem de programação simples

Agora que já vimos as características das gramáticas livres de contexto e alguns 
exemplos, vamos ver uma gramática para uma linguagem de programação simples, que 
demonstra o tipo de situações com as quais teremos que lidar para criar o analisador 
sintático de um compilador. 

[latexmath]
++++++
\[ \begin{aligned}
  C & \rightarrow \texttt{print } \mathbf{string} \\
  C & \rightarrow \texttt{if } R \texttt{ then } C \texttt{ else } C \\
  C & \rightarrow \mathbf{num} := E \\
  R & \rightarrow R = E \ \vert\ R < E \ \vert\ E \\
  E & \rightarrow E + T \ \vert\ E - T \ \vert\ T \\
  T & \rightarrow T * F \ \vert\ T / F \ \vert\ F \\
  F & \rightarrow ( E ) \ \vert\ \mathbf{num} \ \vert\ \mathbf{id}
  \end{aligned}
\]
++++++

=== Geradores de Analisadores Sintáticos

Os geradores de analisadores sintáticos funcionam de maneira bastante similar 
aos geradores de analisadores léxicos vistos no Capítulo 2. Para gerar um 
analisador sintático, usamos a ferramenta geradora passando como entrada 
uma especificação da estrutura sintática da linguagem que queremos analisar; 
a saída do gerador é um analisador sintático na forma de código em alguma 
linguagem de programação (no nosso caso, um arquivo na linguagem C). Esse 
analisador recebe um fluxo de _tokens_ na entrada e gera uma árvore sintática 
na saída. A <<geradorsin>> mostra um diagrama de blocos que representa o uso 
de um gerador de analisadores sintáticos, como descrito. No nosso caso, a 
ferramenta de geração é o bison, versão do projeto GNU para o programa 
yacc do Unix. 

[[geradorsin]]
.Uso de um gerador de analisadores sintáticos
image::images/sintaxe/gerador.eps[scaledwidth="40%"]


